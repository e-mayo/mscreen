# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.5
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_xtcparser', [dirname(__file__)])
        except ImportError:
            from . import _xtcparser
            return _xtcparser
        if fp is not None:
            try:
                _mod = imp.load_module('_xtcparser', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _xtcparser = swig_import_helper()
    del swig_import_helper
else:
    from . import _xtcparser
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def read_xtc_out(fn, bXVG):
    return _xtcparser.read_xtc_out(fn, bXVG)
read_xtc_out = _xtcparser.read_xtc_out

def open_xtc(fn):
    return _xtcparser.open_xtc(fn)
open_xtc = _xtcparser.open_xtc

def read_header_xtc():
    return _xtcparser.read_header_xtc()
read_header_xtc = _xtcparser.read_header_xtc

def read_first_frame_xtc(magic, coords):
    return _xtcparser.read_first_frame_xtc(magic, coords)
read_first_frame_xtc = _xtcparser.read_first_frame_xtc

def read_next_frame_xtc(coords):
    return _xtcparser.read_next_frame_xtc(coords)
read_next_frame_xtc = _xtcparser.read_next_frame_xtc

def close_xtc():
    return _xtcparser.close_xtc()
close_xtc = _xtcparser.close_xtc
#
# this Python function uses the module interface for reading an xtc trajectory file
# the function does not check if file exists or if it has .xtc extension
#
def read_xtc(file):
    
    nframes = 0
    _xtcparser.open_xtc(file)
    headers = []
    status, magic, natoms, step, time =_xtcparser.read_header_xtc()
    if not status:
        print("Error in reading header of file %s"%file)
        return 0
    import numpy
    cs = numpy.zeros((natoms, 3), typecode="f")
    status, prec = _xtcparser.read_first_frame_xtc(magic, cs)
    coords=[]
    
    if not status:
        print("Error in reading frame %d"%nframes)
        return 0
    while status:
        nframes = nframes + 1
        coords.append(cs.astype("f")) # to make a copy of the array
        headers.append({'frame':nframes, 'step':step, 'time':time, 'prec':prec})
        #cs = numpy.zeros((natoms, 3), typecode="f")
        status, step,time,prec = _xtcparser.read_next_frame_xtc(cs)
          
    return coords, headers



# This file is compatible with both classic and new-style classes.


